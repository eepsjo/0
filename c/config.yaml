# 範本。詳閱並依需求自訂後方可使用
# 語法請參考：https://wiki.metacubex.one/handbook/syntax/
# 使用 -d 定義 mihomo 的工作路徑，否則核心會依據系統自動選擇路徑
# 建議將設定檔與核心放在同一資料夾內，並使用 -d 指定該資料夾為工作路徑
# Linux 範例:
#   #!/bin/bash
#   ./mihomo-linux-amd64 -d ./

# 250711a

# ⚠️
allow-lan: false # 禁用區域網路訪問
secret: 00000 # API 驗證。建議設定得複雜一些
authentication: # socks 代理驗證
  - username:pwd
skip-auth-prefixes: # 跳過驗證的 IP 範圍
  - 127.0.0.1/8
  - ::1/128

# GENERAL
mode: rule
ipv6: false
log-level: warning
mixed-port: 00000 # 混合埠，請自行定義
external-controller: 127.0.0.1:99999 # RESTful API 監聽位址
unified-delay: true # 取得較為真實的延遲
tcp-concurrent: true # TCP 並行連接所有 IP，將使用最快握手的 TCP
global-client-fingerprint: chrome # 全域 TLS 指紋
profile:
  store-selected: true # 儲存選擇記錄
  store-fake-ip: true # 永久儲存 fake-ip

# GEO # ♻️ 已棄用
# geodata-mode: true
# geo-auto-update: true # 自動更新
# geo-update-interval: 3 # 單位：小時
# geox-url:
#   geoip: "https://raw.githubusercontent.com/Loyalsoldier/geoip/release/geoip-only-cn-private.dat" # 精簡版，僅包含 CN 和 PRIVATE
#   mmdb: "https://raw.githubusercontent.com/Loyalsoldier/geoip/release/Country-only-cn-private.mmdb"
#   geosite: "" # 不填寫 url 即使用預設的 GeoSite
#   ASN: ""

# SNIFF # ♻️ 已棄用
# sniffer:
#   enable: true
#   force-dns-mapping: true # 對 redir-host 類型識別的流量進行強制嗅探
#   parse-pure-ip: true # 對所有未取得域名的流量進行強制嗅探
#   override-destination: false # 預設不使用嗅探結果作為實際存取目標
#   sniff: # 嗅探範圍
#     HTTP:
#       ports: [80, 8080-8880]
#       override-destination: true # 使用嗅探結果作為實際存取目標
#     TLS: # https
#       ports: [443, 8443]
#     QUIC: # http3
#       ports: [443, 8443]
#   force-domain: # 強制進行嗅探的域名列表
#     - +.v2ex.com
#   skip-domain: # 跳過嗅探的域名列表
#     - Mijia Cloud # 米家設備
#     - +.apple.com # 蘋果
#   skip-src-address: # 跳過嗅探的來源 IP 區段列表
#     - 192.168.0.3/32
#   skip-dst-address: # 跳過嗅探的目標 IP 區段列表
#     - 192.168.0.3/32

# TUN
tun:
  enable: true
  stack: mixed # 模式堆疊
  auto-redirect: true # 僅限 Linux ⚠️ 自動配置 iptables 以重新導向 TCP 連線
  auto-detect-interface: true # 自動識別出口網卡
  auto-route: true # 自動配置路由表
  strict-route: true # 所有連線路由到 tun。將無法被其他裝置存取
  dns-hijack:
    - "any:53"
    - "tcp://any:53"
  device: utun # 虛擬網卡名稱

# DNS
dns:
  enable: true
  prefer-h3: false # 關閉 DoH 的 HTTP3 支援
  ipv6: false
  enhanced-mode: fake-ip
  fake-ip-range: 198.18.0.1/16 # fake-ip 範圍
  fake-ip-filter-mode: blacklist
  fake-ip-filter: # 以下域名、規則集的位址不使用 fake-ip
    - "rule-set:d1"

# PROXY
proxy-anchor: # 錨點，用於簡化設定
  url-test: # url-test 的通用行為
    &url_test {
      type: url-test,
      url: https://www.gstatic.com/generate_204,
      tolerance: 150, # 容忍公差，單位：毫秒。延遲偵測後，只有當延遲更低的節點延遲 + 公差，比正在使用節點的延遲還要低，才會自動切換節點
      interval: 3600,
      lazy: true, # 懶惰模式，只有當前代理組在使用狀態時才發起 url-test
    }
proxy-providers: # 機場訂閱
# 範例訂閱 1: # 訂閱名稱不可重複
#   type: http
#   filter: 關鍵字 # 關鍵字過濾
#   url: url # 機場訂閱連結，http 的 url 不可為空
#   path: ./subscribes/1.yaml # http 的 path 可以為空。檔案儲存路徑。預設只允許存在 mihomo 所在的資料夾或子資料夾，若要存到其他位置，請設定 SAFE_PATHS 環境變數指定額外的安全路徑。環境變數的語法與作業系統的 PATH 環境變數規則相同（即 Windows 下以分號分隔，其他系統下以冒號分隔）
#   interval: 6666 # 單位：秒
#   override: # 節點載入時的覆寫設定項
#     skip-cert-verify: true
#     udp: true # 啟用 UDP
# 範例訂閱 2:
#   type: file
#   path: ./subscribes/2.yaml # file 的 path 不可為空
proxy-groups: # 代理組
  - name: GLOBAL # 全域模式使用的代理組
    proxies:
      - PROXY # 使全域模式為所有流量全部代理
    type: select # 手動選擇
    hidden: true # 隱藏代理組。體現在 UI 等外部控制器上
  - name: PROXY
    proxies:
#     - 範例組 1
#     - 範例組 2
    type: select
# - name: 範例組 1
#   use:
#   - 範例訂閱 1
#   <<: *url_test
# - name: 範例組 2
#   use:
#   - 範例訂閱 2
#   filter: 過濾關鍵字
#   <<: *url_test
    
# RULE
rule-anchor:
  defalut:
    &defalut {
      type: http,
      interval: 10800,
      format: yaml, # 支援 text，但部分設定只能在 yaml 的情況下被 mihomo 解析
    }
rule-providers: # 規則來源
# 範例規則 1:
#   behavior: classical # 規則行為
#   url: url # 規則連結。如果連結指向一個 txt 檔案，需修改 path 的檔案副檔名為 yaml
#   path: ./rulesets/範例規則 1.yaml
#   <<: *defalut
# R: # 以下來自我的倉庫，我自用的規則。儲存路徑 ./rulesets/E/ 。行為 classical
#   behavior: classical
#   url: https://raw.githubusercontent.com/eepsjo/0/main/c/r.yaml
#   path: ./rulesets/E/reject.yaml
#   <<: *defalut
# P:
#   behavior: classical
#   url: https://raw.githubusercontent.com/eepsjo/0/main/c/p.yaml
#   path: ./rulesets/E/proxy.yaml
#   <<: *defalut
# D:
#   behavior: classical
#   url: https://raw.githubusercontent.com/eepsjo/0/main/c/d.yaml
#   path: ./rulesets/E/direct.yaml
#   <<: *defalut
  a: # 以下行為 classical
    behavior: classical
    url: https://raw.githubusercontent.com/Loyalsoldier/clash-rules/release/applications.txt
    path: ./rulesets/applications.yaml
    <<: *defalut
  r: # 以下行為 domain
    behavior: domain
    url: https://anti-ad.net/clash.yaml
    path: ./rulesets/antiadnet.yaml
    <<: *defalut
  d:
    behavior: domain
    url: https://raw.githubusercontent.com/Loyalsoldier/clash-rules/release/direct.txt
    path: ./rulesets/direct.yaml
    <<: *defalut
  d1:
    behavior: domain
    url: https://raw.githubusercontent.com/Loyalsoldier/clash-rules/release/private.txt
    path: ./rulesets/private.yaml
    <<: *defalut
  di: # 以下行為 ipcidr。小心 DNS 洩漏
    behavior: ipcidr
    url: https://raw.githubusercontent.com/Loyalsoldier/clash-rules/release/cncidr.txt
    path: ./rulesets/cncidr.yaml
    <<: *defalut
  di1:
    behavior: ipcidr
    url: https://raw.githubusercontent.com/Loyalsoldier/clash-rules/release/lancidr.txt
    path: ./rulesets/lancidr.yaml
    <<: *defalut
rules: # 分流規則
# - RULE-SET,範例規則,DIRECT
  - AND,((DST-PORT,443),(NETWORK,UDP)),REJECT # 禁用 443 埠的 UDP
  - RULE-SET,a,DIRECT
# - RULE-SET,R,REJECT,no-resolve
# - RULE-SET,D,DIRECT
# - RULE-SET,P,PROXY
  - RULE-SET,r,REJECT,no-resolve
  - RULE-SET,d,DIRECT
  - RULE-SET,d1,DIRECT
  - RULE-SET,di,DIRECT,no-resolve
  - RULE-SET,di1,DIRECT,no-resolve
# - GEOIP,CN,DIRECT,no-resolve # 若需啟用，請解除上方 GEO 部分的註釋
# - GEOIP,private,DIRECT,no-resolve
  - MATCH,PROXY
# 優先處理部分軟體不代理、優化 UDP
# 優先自訂，其次外部來源；優先 REJECT，其次 DIRECT；優先 DOMAIN，其次 IPCIDR
# PROXY 兜底
